#include <wls/protocol/get_config.hpp>
#include <wls/protocol/config.hpp>
#include <wls/protocol/asset.hpp>
#include <wls/protocol/types.hpp>
#include <wls/protocol/version.hpp>

namespace wls { namespace protocol {

fc::variant_object get_config()
{
   fc::mutable_variant_object result;

#ifdef IS_TEST_NET
   result[ "IS_TEST_NET" ] = true;
#else
   result[ "IS_TEST_NET" ] = false;
#endif

   result["WLS_100_PERCENT"] = WLS_100_PERCENT;
   result["WLS_1_PERCENT"] = WLS_1_PERCENT;
   result["WLS_1_TENTH_PERCENT"] = WLS_1_TENTH_PERCENT;
   result["WLS_ADDRESS_PREFIX"] = WLS_ADDRESS_PREFIX;
   result["WLS_BANDWIDTH_AVERAGE_WINDOW_SECONDS"] = WLS_BANDWIDTH_AVERAGE_WINDOW_SECONDS;
   result["WLS_BANDWIDTH_PRECISION"] = WLS_BANDWIDTH_PRECISION;
   result["WLS_BLOCKCHAIN_PRECISION"] = WLS_BLOCKCHAIN_PRECISION;
   result["WLS_BLOCKCHAIN_PRECISION_DIGITS"] = WLS_BLOCKCHAIN_PRECISION_DIGITS;
   result["WLS_BLOCKCHAIN_HARDFORK_VERSION"] = WLS_BLOCKCHAIN_HARDFORK_VERSION;
   result["WLS_BLOCKCHAIN_VERSION"] = WLS_BLOCKCHAIN_VERSION;
   result["WLS_BLOCK_INTERVAL"] = WLS_BLOCK_INTERVAL;
   result["WLS_BLOCKS_PER_DAY"] = WLS_BLOCKS_PER_DAY;
   result["WLS_BLOCKS_PER_HOUR"] = WLS_BLOCKS_PER_HOUR;
   result["WLS_BLOCKS_PER_YEAR"] = WLS_BLOCKS_PER_YEAR;
   result["WLS_CASHOUT_WINDOW_SECONDS"] = WLS_CASHOUT_WINDOW_SECONDS;
   result["WLS_CHAIN_ID"] = WLS_CHAIN_ID;
   result["WLS_CONTENT_CONSTANT"] = WLS_CONTENT_CONSTANT;
   result["WLS_CONTENT_REWARD_PERCENT"] = WLS_CONTENT_REWARD_PERCENT;
   result["WLS_FREE_TRANSACTIONS_WITH_NEW_ACCOUNT"] = WLS_FREE_TRANSACTIONS_WITH_NEW_ACCOUNT;
   result["WLS_GENESIS_TIME"] = WLS_GENESIS_TIME;
   result["WLS_HARDFORK_REQUIRED_WITNESSES"] = WLS_HARDFORK_REQUIRED_WITNESSES;
   result["WLS_INFLATION_RATE_START_PERCENT"] = WLS_INFLATION_RATE_START_PERCENT;
   result["WLS_INFLATION_RATE_STOP_PERCENT"] = WLS_INFLATION_RATE_STOP_PERCENT;
   result["WLS_DEV_FUND_ACC_NAME"] = WLS_DEV_FUND_ACC_NAME;
   result["WLS_INIT_MINER_NAME"] = WLS_INIT_MINER_NAME;
   result["WLS_INIT_PUBLIC_KEY_STR"] = WLS_INIT_PUBLIC_KEY_STR;
#if 0
   // do not expose private key, period.
   // we need this line present but inactivated so CI check for all constants in config.hpp doesn't complain.
   result["WLS_INIT_PRIVATE_KEY"] = WLS_INIT_PRIVATE_KEY;
#endif
   result["WLS_INIT_SUPPLY"] = WLS_INIT_SUPPLY;
   result["WLS_IRREVERSIBLE_THRESHOLD"] = WLS_IRREVERSIBLE_THRESHOLD;
   result["WLS_MAX_ACCOUNT_NAME_LENGTH"] = WLS_MAX_ACCOUNT_NAME_LENGTH;
   result["WLS_MAX_ACCOUNT_WITNESS_VOTES"] = WLS_MAX_ACCOUNT_WITNESS_VOTES;
   result["WLS_MAX_BLOCK_SIZE"] = WLS_MAX_BLOCK_SIZE;
   result["WLS_SOFT_MAX_BLOCK_SIZE"] = WLS_SOFT_MAX_BLOCK_SIZE;
   result["WLS_MAX_COMMENT_DEPTH"] = WLS_MAX_COMMENT_DEPTH;
   result["WLS_MAX_MEMO_SIZE"] = WLS_MAX_MEMO_SIZE;
   result["WLS_MAX_WITNESSES"] = WLS_MAX_WITNESSES;
   result["WLS_MAX_PERMLINK_LENGTH"] = WLS_MAX_PERMLINK_LENGTH;
   result["WLS_MAX_PROXY_RECURSION_DEPTH"] = WLS_MAX_PROXY_RECURSION_DEPTH;
   result["WLS_MAX_RATION_DECAY_RATE"] = WLS_MAX_RATION_DECAY_RATE;
   result["WLS_MAX_RESERVE_RATIO"] = WLS_MAX_RESERVE_RATIO;
   result["WLS_MAX_RUNNER_WITNESSES"] = WLS_MAX_RUNNER_WITNESSES;
   result["WLS_MAX_SHARE_SUPPLY"] = WLS_MAX_SHARE_SUPPLY;
   result["WLS_MAX_SIG_CHECK_DEPTH"] = WLS_MAX_SIG_CHECK_DEPTH;
   result["WLS_MAX_TIME_UNTIL_EXPIRATION"] = WLS_MAX_TIME_UNTIL_EXPIRATION;
   result["WLS_MAX_TRANSACTION_SIZE"] = WLS_MAX_TRANSACTION_SIZE;
   result["WLS_MAX_UNDO_HISTORY"] = WLS_MAX_UNDO_HISTORY;
   result["WLS_MAX_URL_LENGTH"] = WLS_MAX_URL_LENGTH;
   result["WLS_MAX_VOTE_CHANGES"] = WLS_MAX_VOTE_CHANGES;
   result["WLS_MAX_VOTED_WITNESSES"] = WLS_MAX_VOTED_WITNESSES;
   result["WLS_MAX_WITHDRAW_ROUTES"] = WLS_MAX_WITHDRAW_ROUTES;
   result["WLS_MAX_WITNESS_URL_LENGTH"] = WLS_MAX_WITNESS_URL_LENGTH;
   result["WLS_MIN_ACCOUNT_CREATION_FEE"] = WLS_MIN_ACCOUNT_CREATION_FEE;
   result["WLS_MIN_ACCOUNT_NAME_LENGTH"] = WLS_MIN_ACCOUNT_NAME_LENGTH;
   result["WLS_MIN_BLOCK_SIZE"] = WLS_MIN_BLOCK_SIZE;
   result["WLS_MIN_BLOCK_SIZE_LIMIT"] = WLS_MIN_BLOCK_SIZE_LIMIT;
   result["WLS_MIN_PERMLINK_LENGTH"] = WLS_MIN_PERMLINK_LENGTH;
   result["WLS_MIN_REPLY_INTERVAL"] = WLS_MIN_REPLY_INTERVAL;
   result["WLS_MIN_ROOT_COMMENT_INTERVAL"] = WLS_MIN_ROOT_COMMENT_INTERVAL;
   result["WLS_MIN_VOTE_INTERVAL_SEC"] = WLS_MIN_VOTE_INTERVAL_SEC;
   result["WLS_MINER_ACCOUNT"] = WLS_MINER_ACCOUNT;
   result["WLS_MIN_RATION"] = WLS_MIN_RATION;
   result["WLS_MIN_TRANSACTION_EXPIRATION_LIMIT"] = WLS_MIN_TRANSACTION_EXPIRATION_LIMIT;
   result["WLS_MIN_TRANSACTION_SIZE_LIMIT"] = WLS_MIN_TRANSACTION_SIZE_LIMIT;
   result["WLS_MIN_UNDO_HISTORY"] = WLS_MIN_UNDO_HISTORY;
   result["WLS_NULL_ACCOUNT"] = WLS_NULL_ACCOUNT;
   result["WLS_OWNER_UPDATE_LIMIT"] = WLS_OWNER_UPDATE_LIMIT;
   result["WLS_POST_AVERAGE_WINDOW"] = WLS_POST_AVERAGE_WINDOW;
   result["WLS_POST_MAX_BANDWIDTH"] = WLS_POST_MAX_BANDWIDTH;
   result["WLS_POST_REWARD_FUND_NAME"] = WLS_POST_REWARD_FUND_NAME;
   result["WLS_POST_WEIGHT_CONSTANT"] = WLS_POST_WEIGHT_CONSTANT;
   result["WLS_PROXY_TO_SELF_ACCOUNT"] = WLS_PROXY_TO_SELF_ACCOUNT;
   result["WLS_SECONDS_PER_YEAR"] = WLS_SECONDS_PER_YEAR;
   result["WLS_RECENT_RSHARES_DECAY_RATE"] = WLS_RECENT_RSHARES_DECAY_RATE;
   result["WLS_REVERSE_AUCTION_WINDOW_SECONDS"] = WLS_REVERSE_AUCTION_WINDOW_SECONDS;
   result["WLS_ROOT_POST_PARENT"] = WLS_ROOT_POST_PARENT;
   result["WLS_SOFT_MAX_COMMENT_DEPTH"] = WLS_SOFT_MAX_COMMENT_DEPTH;
   result["WLS_START_MINER_VOTING_BLOCK"] = WLS_START_MINER_VOTING_BLOCK;
   result["WLS_SYMBOL_STR"] = WLS_SYMBOL_STR;
   result["WLS_TEMP_ACCOUNT"] = WLS_TEMP_ACCOUNT;
   result["WLS_UPVOTE_LOCKOUT"] = WLS_UPVOTE_LOCKOUT;
   result["WLS_DEV_FUND_PERCENT"] = WLS_DEV_FUND_PERCENT;
   result["WLS_VESTING_WITHDRAW_INTERVALS"] = WLS_VESTING_WITHDRAW_INTERVALS;
   result["WLS_VESTING_WITHDRAW_INTERVAL_SECONDS"] = WLS_VESTING_WITHDRAW_INTERVAL_SECONDS;
   result["WLS_VOTE_DUST_THRESHOLD"] = WLS_VOTE_DUST_THRESHOLD;
   result["WLS_VOTE_REGENERATION_SECONDS"] = WLS_VOTE_REGENERATION_SECONDS;
   result["WLS_SYMBOL"] = WLS_SYMBOL;
   result["VESTS_SYMBOL"] = VESTS_SYMBOL;
   result["VIRTUAL_SCHEDULE_LAP_LENGTH"] = VIRTUAL_SCHEDULE_LAP_LENGTH;
   result["VIRTUAL_SCHEDULE_LAP_LENGTH2"] = VIRTUAL_SCHEDULE_LAP_LENGTH2;

   return result;
}

} } // wls::protocol
